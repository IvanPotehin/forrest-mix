{"version":3,"sources":["_global.sass","_mixins.sass","_variables.sass","_fonts.sass","blocks/_main-menu.sass","vendors/_include-media.scss","blocks/_menu-fixed.sass","blocks/_slides.sass","blocks/_rooms.sass","blocks/_beauty.sass"],"names":[],"mappings":"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","file":"style.css","sourcesContent":["html {\n  font-size: 62.5%; }\n\n.text-cap {\n  text-transform: uppercase; }\n\nbody {\n  position: relative;\n  @include resetmargin();\n  padding-left: 84px;\n  background-color: $maincolor;\n  font-family: 'Open Sans';\n  font-size: 1rem; }\n\n.btn {\n  padding: 15px 20px;\n  background-size: 200% 100%;\n  background-image: linear-gradient(to right, $maincolor 50%, $black 50%);\n  background-position: 100%;\n  border: 2px solid $maincolor;\n  color: $maincolor;\n  font-family: 'Open Sans';\n  font-size: 1.2rem;\n  line-height: 1.1rem;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  cursor: pointer;\n  transition: background-position $transition, color $transition;\n  &:hover {\n    background-position: 0 0;\n    color: $black; } }\n\n\n","@mixin font {\n  font-family: \"Muli\", \"arial\", sans-serif; }\n\n@mixin resetlist {\n  padding-left: 0;\n  margin: 0;\n  list-style: none; }\n\n@mixin resetmargin {\n  margin: 0;\n  padding: 0; }\n\n@mixin container {\n  box-sizing: border-box;\n  max-width: 1440px;\n  margin: 0 auto 0; }\n","$maincolor: #DCD0BF;\n$black: #1A1A1A;\n$white: #FFFFFF;\n\n$transition: 500ms;\n","@font-face {\n  font-family: 'Open Sans';\n  src: url(\"../fonts/OpenSans-Regular.woff2\") format(\"woff2\"), url(\"../fonts/OpenSans-Regular.woff\") format(\"woff\");\n  font-style: normal; }\n\n@font-face {\n  font-family: 'Open Sans';\n  src: url(\"../fonts/OpenSans-SemiBold.woff2\") format(\"woff2\"), url(\"../fonts/OpenSans-SemiBold.woff\") format(\"woff\");\n  font-weight: 500;\n  font-style: normal; }\n\n@font-face {\n  font-family: 'Yeseva One';\n  src: url(\"../fonts/YesevaOne-Regular.woff2\") format(\"woff2\"), url(\"../fonts/YesevaOne-Regular.woff\") format(\"woff\");\n  font-style: normal; }\n",".main-menu {\n  background-color: $white;\n  height: 84px;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n\n  &__list {\n    @include resetlist;\n    margin-left: 11.7%;\n    display: flex;\n    width: 100%;\n    @include media(\"<xl\") {\n      margin-left: 5%;\n      justify-content: space-around; }\n    &-item {\n      margin-right: 46px;\n      @include media(\"<xl\") {\n        margin-right: 20px; }\n      &--phone {\n        margin-left: auto;\n        a {\n          letter-spacing: 0;\n          &::after {\n            display: none; } } } } }\n\n  &__link {\n    position: relative;\n    font-size: 1.2rem;\n    letter-spacing: 2px;\n    color: $black;\n    font-weight: 500;\n    text-decoration: none;\n    white-space: nowrap;\n    @include media(\"<xl\") {\n      letter-spacing: 1px; }\n    &::after {\n      content: \"\";\n      display: block;\n      position: absolute;\n      width: 0;\n      height: 1px;\n      bottom: -3px;\n      background-color: $maincolor;\n      transition: width $transition; }\n    &:hover {\n      &::after {\n        width: 100%; } }\n    &--active {\n      &::after {\n        width: 100%; } } }\n\n\n\n\n  &__bookbtn {\n    height: 84px;\n    border: none;\n    background-color: $white;\n    background-image: none;\n    color: $black;\n    font-weight: 500;\n    letter-spacing: 2px;\n    display: flex;\n    align-items: center;\n    padding: 15px 36px;\n    svg {\n      margin-right: 8px;\n      fill: $black; } } }\n\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//                http://include-media.com\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n\n\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px,\n  'large': 1280px,\n  'huge': 1440px,\n  'xl': 1800px,\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      // scss-lint:disable SpaceAroundOperator\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  // scss-lint:disable SpaceAroundOperator\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n",".menu-fixed {\n  padding: 36px 0px;\n  background-color: $black;\n  height: 100vh;\n  width: 84px;\n  position: fixed;\n  left: 0px;\n  top: 0px;\n\n\n  &__nav {\n    margin: auto;\n    display: flex;\n    flex-flow: column nowrap;\n    justify-content: center;\n    align-items: center;\n    height: calc(100vh - 72px); }\n\n  &__button-wrapper {\n    margin-top: auto;\n    position: relative;\n    width: 84px;\n    height: 200px; }\n\n\n  &__order-call-btn {\n    transform: rotate(270deg) translate(-74px, -58px);\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 200px;\n    height: 46px;\n    font-weight: 500;\n    letter-spacing: 2px; }\n\n  &__link {\n    margin-top: 24px;\n    svg {\n      transition: $transition; }\n    &--main {\n      margin-top: 0;\n      svg {\n        fill: $white; } }\n    &--telegram, &--whatsapp {\n      svg {\n        fill: $maincolor; }\n      &:hover {\n        svg {\n          fill: darken($maincolor, 10%); } } } } }\n",".slides {\n  height: calc(100vh - 84px);\n  background-color: blue; }\n",".rooms {\n  background-color: red;\n  height: 900px; }\n",".beauty {\n  background-color: green;\n  height: 900px; }\n"]}